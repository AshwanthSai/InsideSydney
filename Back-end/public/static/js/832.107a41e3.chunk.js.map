{"version":3,"file":"static/js/832.107a41e3.chunk.js","mappings":"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","sources":["Places/Pages/NewPlaces.jsx","Shared/Components/FormElements/ImageUpload.jsx","Shared/Components/FormElements/Input.jsx","Shared/Components/hooks/useHook.js","Shared/Utils/validators.js"],"sourcesContent":["import React, { useCallback, useContext, useReducer } from \"react\";\r\nimport \"./Place-form.css\"\r\nimport Input from \"../../Shared/Components/FormElements/Input\";\r\nimport {VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE} from \"../../Shared/Utils/validators\"\r\nimport Button from \"../../Shared/Components/FormElements/Button\"\r\nimport useForm from \"../../Shared/Components/hooks/useHook\";\r\nimport useHttpClient from \"../../Shared/Components/hooks/http-hook\";\r\nimport AuthContext from \"../../Shared/Context/AuthContext\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport ErrorModal from \"../../Shared/Components/FormElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../Shared/Components/FormElements/LoadingSpinner\";\r\nimport ImageUpload from \"../../Shared/Components/FormElements/ImageUpload\";\r\n\r\n  /* \r\n    NewPlaces\r\n      > useForm for Overall State Validation\r\n      > Input for Single Field Validation\r\n        > Single Validation via aux within Validate.Js \r\n  */\r\n\r\nconst NewPlaces = () => {\r\n  const {isLoading, error, sendRequest, clearError} = useHttpClient()\r\n  /* \r\n    If we destructure the setter method for userId\r\n    We can  write to Global Store Here.\r\n  */\r\n  const {userId, token} = useContext(AuthContext)\r\n  const[formState, inputHandler] = useForm({\r\n      title : {\r\n        value: \"\",\r\n        isValid: true\r\n      }, \r\n      description : {\r\n        value: \"\",\r\n        isValid: true\r\n      }, \r\n      address : {\r\n        value: \"\",\r\n        isValid: true\r\n      },\r\n      image : {\r\n        value: null,\r\n        isValid: false\r\n      }\r\n  }, false);\r\n\r\n  /* For automatic routing to pages */\r\n  const navigate = useHistory();\r\n\r\n  /*\r\n    Input internally uses a UseReducer. On input change, a useEffect\r\n    is Run and data is passed up to parent via the prop function.\r\n    The prop function is again passed as prop to Child.\r\n    To prevent an While loop. We memoize, the inputHandler Function \r\n    within useForm().\r\n  */\r\n\r\n  const placeSubmitHandler = async(e) => {\r\n    e.preventDefault()\r\n    /* \r\n      Remember for POST, PUT, DELETE requests \r\n      You need to send Metadata along with the request.\r\n    */\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"title\", formState.inputs.title.value)\r\n      formData.append(\"description\", formState.inputs.description.value)\r\n      formData.append(\"address\",formState.inputs.address.value)\r\n      formData.append(\"image\",formState.inputs.image.value)\r\n      /* \r\n        Adding token within request header\r\n      */\r\n      const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/new`,\"POST\", formData, {\r\n        \"Authorization\" : \"Bearer \" + token,\r\n      })\r\n      /* Here our custom hook, will catch and show any Errors */\r\n      navigate.push(\"/\")\r\n    } catch(error){\r\n\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ErrorModal error = {error} onClear = {clearError} />\r\n        <form className=\"place-form\">\r\n        {/* All input is passed to Input Handler within useForm*/}\r\n        {isLoading && <LoadingSpinner center asOverlay/>}\r\n        <Input \r\n          element=\"input\" \r\n          id= \"title\"\r\n          type=\"text\" \r\n          label=\"Title\" \r\n          validators = {[VALIDATOR_REQUIRE()]}\r\n          onInput = {inputHandler}\r\n          errorText = \"Please enter a valid title\"\r\n          />\r\n        <Input \r\n          element=\"textarea\" \r\n          id= \"description\"\r\n          type=\"text\" \r\n          label=\"Description\" \r\n          validators = {[VALIDATOR_MINLENGTH(5)]}\r\n          onInput = {inputHandler}\r\n          errorText = \"Please enter a longer address\"\r\n          />\r\n        <Input \r\n          element=\"textarea\" \r\n          id= \"address\"\r\n          type=\"text\" \r\n          label=\"Address\" \r\n          validators = {[VALIDATOR_MINLENGTH(5)]}\r\n          onInput = {inputHandler}\r\n          errorText = \"Please enter a longer address\"\r\n          />\r\n        <ImageUpload center id=\"image\" onInput = {inputHandler} onError = \"Please Pick a Valid File\"/>\r\n        <Button type = \"submit\" \r\n          // If entire form state is inValid then, disable form\r\n          disabled = {!formState.isValid}\r\n          onClick = {placeSubmitHandler}>\r\n          Submit \r\n        </Button>\r\n        </form>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default NewPlaces;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./ImageUpload.css\"\r\nimport Button from \"./Button\";\r\n\r\nconst ImageUpload = (props) => {\r\n  const[file, setFile] = useState();\r\n  const[previewUrl, setPreviewUrl] = useState();\r\n  const[isValid, setIsValid] = useState(false);\r\n\r\n  const filePicker = useRef();\r\n  const pickHandler = (event) => {\r\n    filePicker.current.click();\r\n  }\r\n\r\n  /* \r\n    State changes are not immediate and\r\n    we are passing it upwards. Hence we use a proxy boolean\r\n    called fileValidity.\r\n  */\r\n  const pickedFileHandler = (event) => {\r\n    let pickedFile;\r\n    let fileValidity = isValid;\r\n    if(event.target.files && event.target.files.length === 1){\r\n      pickedFile = event.target.files[0]\r\n      setFile(pickedFile)\r\n      setIsValid(true)\r\n      fileValidity = true;\r\n    } else {\r\n      setIsValid(false)\r\n    }\r\n    // console.log(pickedFile)\r\n    // console.log(typeof pickedFile)\r\n    props.onInput(props.id, pickedFile,fileValidity)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n    /* \r\n      2, has to be specified before 1. \r\n      Clunky API\r\n    */\r\n    const fileReader = new FileReader();\r\n    // Set the onload event handler\r\n    fileReader.onload = () => {\r\n      //2\r\n      setPreviewUrl(fileReader.result); // Set the preview URL\r\n    };\r\n    // Start reading the file\r\n    //1\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  return (\r\n  <React.Fragment>\r\n    <div className=\"form-control\">\r\n      <input \r\n        id = {props.id}\r\n        type=\"file\" \r\n        accept = \".jpg,.png,jpeg\" \r\n        style ={{display:\"none\"}}\r\n        ref = {filePicker}\r\n        onChange={pickedFileHandler}\r\n      />\r\n      <div className = {`image-upload ${props.center && \"center\"}`}>\r\n        <div className = \"image-upload__preview\" >\r\n          {previewUrl && <img src={previewUrl} alt= \"Preview\"/>}\r\n          {!previewUrl && <p>Please pick an image.</p>}\r\n        </div>\r\n        <Button type = \"button\" onClick={pickHandler}>Pick Image</Button>\r\n      </div>\r\n      {!isValid && <p>{props.errorText}</p>}\r\n    </div>\r\n  </React.Fragment>)\r\n};\r\n\r\nexport default ImageUpload;\r\n","import React, { useEffect, useReducer } from \"react\";\r\nimport \"./Input.css\"\r\nimport {validate} from \"../../Utils/validators\"\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch(action.type) {\r\n        case \"CHANGE\" : \r\n            return {...state, \r\n                /* \r\n                    Overall validation of our individual component\r\n                    Is doing using this aux validate function within Validation.js\r\n                */\r\n                value : action.value, isValid: validate(action.value, action.validators)\r\n            }\r\n        /* \r\n            To prevent, first time validity check\r\n        */    \r\n        case \"TOUCHED\" : \r\n        return {...state, isTouched: action.isTouched}   \r\n        default :  \r\n            return state\r\n    }\r\n}\r\n\r\nconst Input = (props) => {\r\n    const[inputState,dispatch] = useReducer(inputReducer,\r\n        {\r\n            value: props.value || \"\", \r\n            isTouched: false, \r\n            isValid: props.validity || \"\"\r\n        }\r\n    )\r\n    \r\n    /* Change in Input, Push to Store */\r\n    const changeHandler = (event) => {\r\n        dispatch({type : \"CHANGE\",\r\n             value : event.target.value,\r\n             validators : props.validators\r\n            }\r\n        )\r\n    }\r\n    /* \r\n        For not showing an error the first time.\r\n    */\r\n    const blurHandler = (event) => {\r\n        dispatch({type : \"TOUCHED\",\r\n            isTouched : true\r\n           }\r\n       )\r\n    } \r\n\r\n    /* \r\n        If input prop type\r\n            input then small input\r\n            else render a Text Area. \r\n    */\r\n    const element =\r\n        props.element ===\"input\" ? (\r\n            <input id={props.id} type={props.type}\r\n             placeholder={props.placeholder}\r\n             value = {inputState.value}\r\n             onChange = {changeHandler}\r\n             onBlur={blurHandler}\r\n             />\r\n        ) : (\r\n            <textarea id={props.id} rows={props.rows || 3}\r\n             value = {inputState.value}\r\n             onChange = {changeHandler}\r\n             onBlur={blurHandler}\r\n            />\r\n        );\r\n    \r\n    const{id, onInput} = props\r\n    const{value,isValid} = inputState\r\n\r\n    /* On input pass to parent Form State*/\r\n    useEffect(() => {\r\n        onInput(id, value, isValid)\r\n    }, [onInput,value,isValid])\r\n  \r\n  return (\r\n    <div className={`form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`}>\r\n        <label htmlFor={props.id}>{props.label}</label>\r\n            {element}\r\n            {!inputState.isValid && inputState.isTouched && \r\n            <p>{props.errorText}</p>}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","import React, { useCallback, useReducer } from \"react\";\r\n\r\n/* \r\n  Idea behind Form Hook is to \r\n  Check validity of entire Inputs\r\n\r\n  Internally uses Reducer for two way binding.\r\n    Child sends parent value and validity\r\n    We pass back state as value to input.\r\n\r\n    UseForm uses UseReducer for Entire form (All Inputs)\r\n      Input uses UseReducer for Entire Input\r\n*/\r\n\r\nconst formReducer = (state, action) => {\r\n    switch(action.type) {\r\n      /* Recompute Entire Form Validity */\r\n      case \"INPUT_CHANGE\": \r\n        let formIsValid = true;\r\n        /*\r\n          Loop through all the isValid fields within Inputs\r\n          Create a final is Form Valid Field.\r\n        */\r\n        for(const inputID in state.inputs){\r\n          /* If active element then add to inputs */\r\n          if(inputID === action.inputID){\r\n            formIsValid = formIsValid && action.isValid\r\n          } else {\r\n            /* If inactive, keep old state */\r\n            formIsValid = formIsValid && state.inputs[inputID].isValid\r\n          }\r\n        }\r\n        return {\r\n          /*\r\n            All Previous State Variables, \r\n            If we add anything in the future\r\n          */\r\n          ...state, \r\n         inputs : {\r\n          /* \r\n            All input items we have\r\n          */\r\n          ...state.inputs,\r\n          /* \r\n            Find the Appropriate input Type, update its value.\r\n            title : {value : newValue, isValid: newValue}\r\n          */\r\n          [action.inputID]  : {value : action.value, isValid: action.isValid}\r\n        },\r\n        /* Entire Form Validity */\r\n          isValid : formIsValid\r\n      }\r\n\r\n      case \"SET_DATA\": \r\n        return {\r\n          inputs : action.inputs,\r\n          isValid : action.formIsValid\r\n        }\r\n      /* If action does not match, Return old state */\r\n      default : \r\n        return {...state}\r\n    }\r\n}\r\n\r\n/*\r\n useHook does not accept props, but takes in argument\r\n Remember, this is a Hook.\r\n*/\r\n\r\nconst useForm = (InitialInput, InitialValidity) => {\r\n    const [formState,dispatch] = useReducer(formReducer, {\r\n        inputs: InitialInput,\r\n        /* For entire form */\r\n        isValid:InitialValidity\r\n    });\r\n\r\n    /* \r\n      Value changed in input, \r\n      Push to Global Store and \r\n      Recompute Global Validity.\r\n    */\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        const eventType = \"INPUT_CHANGE\"\r\n        const inputID = id\r\n        dispatch({type: eventType, inputID, value, isValid})\r\n    },[]);\r\n\r\n    /* To set once, network request is resolved */\r\n    const setFormData =  useCallback((inputData, formValidity) => {\r\n      const eventType = \"SET_DATA\"\r\n      dispatch({eventType, inputs : inputData, formIsValid : formValidity})\r\n    },[])\r\n  \r\n  //Returning Initial State and Set Method for our Custom Hook\r\n  return [formState, inputHandler, setFormData];\r\n};\r\n\r\nexport default useForm;\r\n\r\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\n/* \n  We call validate when there is a change in value.\n  Within Input Component, Which gets a isValid Boolean. From the function below\n\n  Value - Value of UseReducer State -> Numbers/Strings\n  Validators -> [VALIDATOR_REQUIRE(), VALIDATOR_FILE()]\n             -> [{type: VALIDATOR_TYPE_REQUIRE},{type: VALIDATOR_TYPE_FILE},{type: VALIDATOR_TYPE_EMAIL}]\n*/\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n"],"names":["NewPlaces","isLoading","error","sendRequest","clearError","useHttpClient","userId","token","useContext","AuthContext","formState","inputHandler","useForm","title","value","isValid","description","address","image","navigate","useHistory","_jsxs","_Fragment","children","_jsx","ErrorModal","onClear","className","LoadingSpinner","center","asOverlay","Input","element","id","type","label","validators","VALIDATOR_REQUIRE","onInput","errorText","VALIDATOR_MINLENGTH","ImageUpload","onError","Button","disabled","onClick","async","e","preventDefault","formData","FormData","append","inputs","concat","process","push","props","file","setFile","useState","previewUrl","setPreviewUrl","setIsValid","filePicker","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","React","accept","style","display","ref","onChange","event","pickedFile","fileValidity","target","files","length","src","alt","current","click","inputReducer","state","action","validate","isTouched","inputState","dispatch","useReducer","validity","changeHandler","blurHandler","placeholder","onBlur","rows","htmlFor","formReducer","formIsValid","inputID","InitialInput","InitialValidity","useCallback","inputData","formValidity","eventType","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","val","VALIDATOR_EMAIL","validator","trim","test"],"sourceRoot":""}