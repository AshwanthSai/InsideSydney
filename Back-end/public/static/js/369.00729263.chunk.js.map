{"version":3,"file":"static/js/369.00729263.chunk.js","mappings":"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","sources":["Shared/Components/UIElements/Map.jsx","Places/Components/PlaceItem.jsx","Places/Components/PlaceList.jsx","Places/Pages/UserPlaces.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport \"./Map.css\"\r\nimport {\r\n    APIProvider,\r\n    Map,\r\n    AdvancedMarker,\r\n    MapCameraChangedEvent,\r\n    Pin\r\n} from '@vis.gl/react-google-maps';\r\n\r\nconst PoiMarkers = (props) => {\r\n    const {location} = props;\r\n    return (\r\n      <>\r\n          <AdvancedMarker\r\n            key={\"Opera House\"}\r\n            position={location}>\r\n             <Pin background={'#FBBC04'} glyphColor={'#000'} borderColor={'#000'} />\r\n          </AdvancedMarker>\r\n      </>\r\n    );\r\n  };\r\n\r\n\r\nconst CustomMap = (props) => {\r\n    const { center, zoom } = props\r\n\r\n    // useEffect(() => {\r\n   return ( <APIProvider apiKey={\"AIzaSyCJpI2c3iNZD0oIyEbaBXd2uwidQ5ED1bc\"} onLoad={() => console.log('Maps API has loaded.')}>\r\n        <Map\r\n            defaultZoom={zoom}\r\n            defaultCenter={center}\r\n            mapId='DEMO_MAP_ID'>\r\n            <PoiMarkers location={center} />\r\n        </Map>\r\n    </APIProvider>)\r\n    // }, [center, zoom]);\r\n}\r\n\r\n\r\nconst RenderMap = (props) => {\r\n    // console.log(props)\r\n    return <div  \r\n             className={`map ${props.className}`}    \r\n             style = {props.style}>\r\n               jsx\r\n               <CustomMap {...props}/>  \r\n            </div>\r\n}\r\n\r\n\r\nexport default RenderMap;\r\n","import React, { useContext } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport Card from \"../../Shared/Components/UIElements/Card\";\r\nimport Modal from \"./Modal\";\r\nimport \"./PlaceItem.css\"\r\nimport Button from \"../../Shared/Components/FormElements/Button\"\r\nimport Map from \"../../Shared/Components/UIElements/Map\";\r\nimport AuthContext from \"../../Shared/Context/AuthContext\";\r\nimport useHttpClient from \"../../Shared/Components/hooks/http-hook\";\r\nimport ErrorModal from \"../../Shared/Components/FormElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../Shared/Components/FormElements/LoadingSpinner\";\r\n\r\nconst PlaceItem = (props) => {\r\n  const {isLoggedIn,userId, token} = useContext(AuthContext);\r\n  //To Render Map.\r\n  const [showMap, setShowMap] = useState(false);\r\n  const openMapHandler = () => setShowMap(true);\r\n  const closeMapHandler = () => setShowMap(false);\r\n  const {isLoading, error, sendRequest, clearError} = useHttpClient();\r\n\r\n  /*Confirmation Modal State*/\r\n  const[showConfirmModal, setShowConfirmModal] = useState(false)\r\n  \r\n\r\n  // Delete -> Show Modal\r\n  const showDeleteWarningHandler = () => {\r\n    setShowConfirmModal(true)\r\n  }\r\n  \r\n  // Delete -> No or Anywhere outside the Modal\r\n  const cancelDeleteWarningHandler = () => {\r\n    setShowConfirmModal(false)\r\n  }\r\n\r\n  /*\r\n    Only show edit and delete, if you are the owner. I need to add this logic to the \r\n    Backend and Front End\r\n  */\r\n\r\n\r\n  // Delete -> Yes\r\n  const confirmDeleteHandler = () => {\r\n    setShowConfirmModal(false)\r\n    try {\r\n     const deleteItem = async() => {\r\n        const response = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/${props.id}`, \"DELETE\", null,  {\r\n          'Authorization': 'Bearer ' +  token,\r\n        })\r\n        props.onDelete(props.id)\r\n      }\r\n      deleteItem() \r\n    } catch (error){} \r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error = {error} onClear = {clearError} />\r\n\r\n    {/* Modal for Maps */}\r\n      <Modal \r\n        //To render backdrop\r\n        show = {showMap} \r\n        //For Click in Backdrop\r\n        onCancel = {closeMapHandler}\r\n        header = {props.address}\r\n\r\n        contentClass = \"place-item__modal-content\"\r\n        footerClass = \"place-item__modal-actions\"\r\n        //Button in Footer is passed as Prop\r\n        footer = {<Button onClick={closeMapHandler}>CLOSE</Button>}\r\n      >\r\n          <div className=\"map-container\">\r\n            <Map center = {props.coordinates} zoom ={16}/>\r\n          </div>\r\n      </Modal>\r\n      {/* Modal for Delete */}\r\n      <Modal\r\n        show = {showConfirmModal}\r\n        header = \"Are you sure ?\"\r\n        footerClass = \"place-item__modal-actions\"\r\n        footer = {\r\n          <React.Fragment>\r\n              <Button inverse onClick = {() => cancelDeleteWarningHandler()}>CANCEL</Button>\r\n              <Button danger onClick = {() => confirmDeleteHandler()}>DELETE</Button>\r\n          </React.Fragment>\r\n        }\r\n        >\r\n        <p>\r\n          Do you want to proceed and delete this place ?\r\n          Please note that it cannot be undone thereafter.\r\n        </p>\r\n      </Modal>\r\n        {/* Each place as card item */}\r\n        <li className=\"place-item\">\r\n            <Card className= \"place-item__content\">\r\n                {isLoading && <LoadingSpinner asOverlay/>} \r\n                <div className=\"place-item__image\">\r\n                    <img src={`${process.env.REACT_APP_BACKEND_URL}\\\\` + props.image} alt = {props.title}/>\r\n                </div>\r\n                <div className=\"place-item__info\">\r\n                    <h2>{props.title}</h2>\r\n                    <h3>{props.address}</h3>\r\n                    <p>{props.description}</p>\r\n                </div>\r\n                <div className = \"place-item__actions\">\r\n                  <Button inverse onClick = {openMapHandler}>View on Map</Button>\r\n                 {isLoggedIn && props.creatorId === userId && <Button to={`/places/${props.id}`}>EDIT</Button>}\r\n                 {isLoggedIn && props.creatorId === userId && <Button danger onClick = {() => showDeleteWarningHandler()}>DELETE</Button>}\r\n                </div>\r\n            </Card>\r\n        </li>\r\n    </React.Fragment>\r\n  )\r\n};\r\n\r\nexport default PlaceItem;\r\n","\r\nimport \"./PlaceList.css\"\r\nimport Card from \"../../Shared/Components/UIElements/Card\";\r\nimport PlaceItem from \"./PlaceItem\"\r\nimport Button from \"../../Shared/Components/FormElements/Button\";\r\n\r\nconst PlaceList = (props) => {\r\n  if(props.places.length === 0){\r\n    return <div className=\"place-list center\">\r\n        <Card>\r\n            <h2>No places found. Maybe Create One?</h2>\r\n            <Button>Share Place</Button>\r\n        </Card>\r\n    </div>\r\n  }\r\n\r\n  return (\r\n    <ul className = \"place-list\">\r\n        {props.places.map(place => {\r\n            return <PlaceItem\r\n                    key = {place.id}\r\n                    id = {place.id}\r\n                    image = {place.image}\r\n                    title = {place.title}\r\n                    description = {place.description}\r\n                    address = {place.address}\r\n                    creatorId = {place.creator}\r\n                    coordinates = {place.location}\r\n                    onDelete = {props.onDelete}\r\n                />\r\n        })}\r\n    </ul>\r\n  )\r\n};\r\n\r\nexport default PlaceList;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport \"./UserPlaces.css\"\r\nimport PlaceList from \"../Components/PlaceList\";\r\nimport { useParams } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport ErrorModal from \"../../Shared/Components/FormElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../Shared/Components/FormElements/LoadingSpinner\";\r\nimport useHttpClient from \"../../Shared/Components/hooks/http-hook\";\r\nimport AuthContext from \"../../Shared/Context/AuthContext\";\r\n\r\n\r\n/* \r\n  ! User Places\r\n  !   >   Place List\r\n  !       >  Place Item\r\n*/\r\n\r\n\r\nconst UserPlaces = () => {\r\n  //  <Route path = \"/:userId/places\"\r\n  const[loadedPlaces, setLoadedPlaces] = useState()\r\n  /* \r\n    Using our Custom HTTP Request Client\r\n  */\r\n  const {isLoading, error, sendRequest, clearError} = useHttpClient();\r\n  const userId = useParams().userId;\r\n  /* \r\n    If you do not use useEffect, the function is re-evaluated for re-render\r\n    If you do not store the result of useEffect in a State, it will not reload after fetch is complete\r\n  */\r\n  useEffect(()=> {\r\n    const request = async() => {\r\n      try {\r\n        const filteredPlaces = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`)\r\n        setLoadedPlaces(filteredPlaces.result)\r\n      } catch (err) {\r\n        /* We catch errors within our HTTP Client itself */\r\n      }\r\n    }\r\n    request();\r\n  }, [sendRequest, userId])\r\n\r\n  const deleteItem = (deletedPlaceId) => {\r\n    setLoadedPlaces((previousLoadedPlaces) => \r\n       previousLoadedPlaces.filter((place) => place.id !== deletedPlaceId))\r\n  }\r\n\r\n  return (\r\n          <>\r\n            <ErrorModal error = {error} onClear = {clearError} />\r\n              {isLoading && \r\n                (<div className=\"center\">\r\n                  <LoadingSpinner asOverlay/>\r\n                </div>)\r\n              }\r\n            {!isLoading && loadedPlaces && <PlaceList places = {loadedPlaces} onDelete = {deleteItem} />}\r\n          </>  \r\n        )\r\n};\r\n\r\nexport default UserPlaces;\r\n"],"names":["PoiMarkers","props","location","_jsx","_Fragment","children","AdvancedMarker","position","Pin","background","glyphColor","borderColor","CustomMap","center","zoom","APIProvider","apiKey","onLoad","console","log","Map","defaultZoom","defaultCenter","mapId","_jsxs","className","concat","style","isLoggedIn","userId","token","useContext","AuthContext","showMap","setShowMap","useState","closeMapHandler","isLoading","error","sendRequest","clearError","useHttpClient","showConfirmModal","setShowConfirmModal","React","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","coordinates","inverse","danger","confirmDeleteHandler","async","process","id","onDelete","deleteItem","Card","LoadingSpinner","asOverlay","src","image","alt","title","description","openMapHandler","creatorId","to","places","length","map","place","PlaceItem","creator","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","useEffect","filteredPlaces","result","err","request","PlaceList","deletedPlaceId","previousLoadedPlaces","filter"],"sourceRoot":""}